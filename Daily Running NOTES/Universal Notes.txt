 JAVA

Programming components:(Alphabets)
1.Variables
2.methods
3.blocks
4.constructors
5.classes
6.Interfaces
7.Abstract Classes

[Prgramming Concepts:
Oops
Exception Handling
Collections

Oop(Object Oriented Programming):
class
object
Abstraction
Encapulation
Polymorphism
Inheritance
-------
MultiThread
Files
Networking

program files-> Java -> jdk 18.0.1.1 -> bin 

copy path

Setting
This Pc-> right click on ThisPC-> Properties -> Adv System Setting 
-> Environment Variable -> User/System -> openpath varible ->click new-> Assign value as copied bin path

SStages of Programming
1.Compilation 
22. Execution
After wring the program, we save the program woth language extension
 C-> .c
Python : .py
Java  :    Test.java
compilation: the process of checking th program constructed according to the rules of language or not, is known as compilation process
-> After compilation process sucessful , c& c++ programs will generate Object code
-> java will generate byte Code
-> C, c++, Java will use compiler for compilation stage
Execution:
the process of running the ccopiles codes & checking the required output is generated or not is know as execution process
-> in c & C++ the obective code is converted into executable code with extension of .exe and generate results
-> in jva the  byte code is executed in JVM

Difference b/w Objective code & Byte Code:
Objective Code:
-> The compiled code generated from c& c++ is know as objective code
-> while objective code generation OS os participated because of this reason objective code is platfrom dependent
Byte Code:-> 
The compiled cide generated from Java Program is known as byte code
-> while byte code generation operating system is not participated, because of this reason, byte code is platorm independent code
Advantage:
The byte code generated from one platform can be executed in all platfrom where JVM ia available	
Define HIgh level  Language:
 -> th language programs which are constructed    from user understable format , is known as High level language
Low Level: 
->the language programs which are constructed from th format which are not user understable , is known as High level language


Translators: 

-> these are used to translate High level languge into low level lanaguage and vice versa.
-> these are classifoed into two types:
 -> 1. Compilers
-> 2. Interpreter

-> 1. Compilers
			it translates th total program at a time
-> 2. Interpreter
		it translates the program line by line

-> In c,c++ will use compiler in compilaation process
-> Java will use both Interpreter & copiler in exectution process

-> JAMES GOSLING
-> Sun Microsystems
->WORA -> write once run anywhere
 -> Green talk (.gt)
-> OAK language (rejected)
-> JAVA  ->  1995

Version of JAVA :
1995 -> JAVA  Alpha & Beta
1996 -> JDK 1.0
1997 -> JDK 1.1
1998 -> JDK 1.2
2000-> JDK 1.3
2002->JDK 1.4
----------------
2004 -> JAVA5(Tiger)
			-JRE1.5
			-jDK 1.5
2006 -> JAVA 6
			-JRE1.6
			-jDK 1.6
2011 -> JAva 7 (JRE 1.7 & JDK 1.7)
---------------
2014 -> JAVA 8 (JDK1.8 & JRE 1.8) (LTS)
2017 -> Java 9 (JDK 1.9 & JRE 1.9)
2018 -> Java 10 & java 11
2019 -> java 12 & Java 15
2020 -> java 16& java 17 (LTS)
2021 Java 18(march)

 Difference  b/w JDk & JRE :
JDK: is stands JAVA DEVELOPMENT KIT and which provides th efollowing :
 1) JAvA Compiler
2)Java Library
3.) JVM

1) JAVA Compiler : converts source code into byte code
2)Java Library : 
it will hold pre defined programming components :which can be used  i Application development
-> we use 'java' word to represent java library
Some important packages  form JavaLib:
3.) JVM :
	JVM Stands for JAVA Virtual Machine, & which is used to execute java byte code
	JVM  internally having the following three partitions 
	1) Class Loader Subsystem
	2) Runtime Data Area
	3) Execution Engine
Virtual Machine : the software component which internally having the behaviour like machine
	
	JRE: - 
	-> It stands for JAVA runTime Enviroment.
	-> It is an inbult part of JDK,
	-> 	It provide 'JavaLib' & 'JVM'



	
Class : 
it is structed layout in java for genrating object
s
 -> holds variable & methods:

	variables -> are know as data holders
	methods -> defines actions
	main() -> is startin point of program execution

we use 'class' keywword to declare classes in Java :
Structure of class  in Java :
	
	class Class_name 
	{
	//variables 
	// methods
	// main()
	}

Note :
-> In classes the statring letter must be capital or uppercase according to real time code

-> in java main main() is having the following pre defined standard format:

	public static void main(String args[])
	public static void main(String []args)

Variables, DataTypes, :

Variables:  These are data Holder 
		-> Name for memory(data Holer)

Data Types:
-> Types of data which we are expecting as input in Java Program are know as DataTypes in JAVA
	-> These are classified into 2 Types
		-> 1) Primitive
		->2) Non Primitive Data Types
1) Primitive
	the Single valued data format are know as Primitive Datatypers or Fundamental DataTypes or Basic DataTypes.

	These are classified into 4 types: 
	a) Integer Data Types
			The Numberic data without decimal points are known as Integer Datatypes
	1)byte - 1 Byte 
	2)short -> 2 Bytes
	3) int --> 4 Bytes
	4)long - 8Bytes

	b) FLoat Data Types
			The Numberic data with decimal points are known 
			-> float ->4 bytes
			-> double -> 8 bytes
			in java, when we want to assign float value, we must use "F" or "f" in the RHS of Declaration.

	c) Charecter Data Types
					char  - 1 Byte
			tthe singl value charecter which is represented in single quotes is know as charcter datatype
	d) Boolean Data  Types
 				true or flase
				boolean   - 1 bit

	Structure of declaring Datatype, variable , data:
			
		data_type  vairable_name = data;

`Define TypeCasting:
---------------------------
	The process of converting one datatype value into another datatype value is know as typcasting.
	it is classified into two ways
		a)Widening process
					the process of converting lower datatypes into higher datatypes is know as widening process
		
	char -> byte -> short -> int -> long -> float -> double
				
		b)Narrowing Process :
				the process of converting higher datatype to lower datatype is know as narrowing process
	
	double-> float->long->int->short->byte -> char

		Strucuture of Typecasting:
			
			(coverting_datatype)(variable/expression)
	
		->2) Non Primitive Data Types
			the group values data format are know as non primitivi data types or referential datatypes. 
	
	-> Classes
	-> Interface
	->Array
	-> Enum
-> Classes
		-> varuable and methods
		classification of classes:
		1.pre defined classes : 
		the classes which are available from java library are know as pre- defined classes or built in classes
		String
		System
	2. User defined classes:
				the classes whic are defined by programmer are known as user defined classes
		eg:
			Percentage
			DemoDt
			
Object: 
	it is storage memory related to a class that holding members of class.

	A java object is member of java classes , which help to create an instance and specifies identity, bhehaviour, and state

-> we use the keyword "new" in jva to create objects.

	Structure of object creation:
		
		Class_name  object_name = new Class_name();
	
		Variables :
			Static variable :
			The variables which are declared with the keyword "static" are know as static variable.
	-> these variables get the memory with in the class which class loading and can be  accessed with class_name
	
			Non static varaible - >
				The variables which are not declared with woth static keyword are know as non static variables
		classified into two types: 
 		Instance variable: 	
				the varibales which are declared outside methods & inside th class are know as instance variable.
		-> these can be accessed by using object_name & these get memory in object area.

	Local Variable:
			The variables wich are declared inside the methods are know as local variable. 
-	->These will get memory inside method while method execution.

	Scanner Class:
		
	some important pre defined methods from Scanner class:
	1.nextByte()
	2.nextShort()
	3.nextInt()
	4.nextLong()
	5.nextFloat()
	6.nextDouble()
	7. nextBoolean()
	8.nextLine()
Opertors:
	1.Arithematic operator

		+,-,*, /,%
	2.Assignment Operator:
		 =     Assign
		+	=   Add & assign
		-	=		Sub & Assign
		*	=    Mul & Assign
		/	=		Divide & Assign
		%=   Mod & Assign
		<<=    
		>>=
		&=
		|=
		

	Relaional Operator:
		
	== Equalsto
	!= Not Equalsto
	> Greater Than
	>= Greater than or Equals to
	<= Less Than or Equal to 
	< Less Than
		a = 10 b  =17
		a==b -> false
		a!=b -> true
		a>=b false
		a<=b		true
		a>b 	false
		a<b true

	Inc/Dec Operators:

	pre Inc/ Pre Dec -> update & Utilize   ++a / --a
	post Inc / Post Dec -> utilze & update  a++ / a--
	
	Logical Operators:
		&& - Logical And
			| |  - Logical Or
			! - Logical Not
  
	a = 20 , b =15 , c= 11

	(a>b)    	||		(a>c)  || (b>c)
	
	!(a>b)


	
	Bitwise Operator:
		
	& Bitwise And
	|	Bitwise Or	
	^	Bitwise Xor
	<< LeftShift
	>>	Right Shift
	

	ternary operator    (a>b)?true:flase;
	instanceof

	Control Structures:
	->  A programmer can control flow of execution of program by using control Structures.
	-> These are catogrised into 3 ways.
	-> Decision Making Statements/Selection Statements
	->Iterative Statements/ Looping Statements
	-> Jumping Statements/ Branching Statements
		
	-> Decision Making Statements/Selection Statements
			-> Simple IF
				
		Syntax:
			if(condition)
			{
			//Statements
			}

			->If Else
			if(condition)
			{
			//Statements
			}
			else
			{
				//statements
			}
			->Nested If/Inner If

			Syntax:
					if(conditon)
					{
							if(condition)
							{
								//statements
							}	
					}
			
			->Cascaded If/If elseif Ladder

				if(conditon)
				{		

				}
			else  if(conditon)
			{
			}	
			 else if(conditon)
			{
			}
		else
			{
			}	

			-> Switch Case
			
			switch(expression)
			{
					case label1: //statements
							break;
					case label2:  //statements
							break;
				.
				.
				.
				default:
					//statements
			}

	Iterative STatements:
				1. while Loop
					
				while(condition)
				{
					//Statements
				}


				
				2. Do While
		do{
			

		}while(condition);
				
		Methods:
				
		return_type  method_name (parameter_list)
		{
			
			//statements
		}
	
		
			static return_type method_name (para list)
			{
					//statements
			}
		
		1.using import package_name.c_name/I_name
		2.Using import package_name.*

		3Using Fully Qualified Name

.using import package_name.c_name/I_name

	import java.util.Scanner;
	import test.Addition;

Using import package_name.*
		
	import java.util.*;
	import test.*;

Using Fully Qualified Name : 
	
	java.util.Scanner  sc = new java.util.Scanner(System.in);
	
	Syatx: 
	import static package_name.cname/Iname
 
	double var_name  = Math.sqrt(var);

		{
			//statements
		}




3. For Loop. :

	for(initilization; condition ; inc/dec)	{
			// statements
		}

	
		-> 


	-> Jumping Statements/ Branching Statements

		continue
		break
		return

	 Constructors in java:
	
		class_name(parameters)
		{
		//method body
		}
		
  		String	
		
		String str = "Vijay";

	String str2 = new String("Vijay");
	

		String data = str.toString();
		
		Wrapper Class
		collection<E> classes
		Map<k,v> classes
		Enum<E> classes

		charAt(int index)
		length(String st)

		charAt()  method

	Syntax: 
 	char ch = string.charAt(index);

	int l = string.length()

		65 -> 90  Uppercase charecters (A -Z)
		97 -> 122 Lower case charecters( a-z)
		48 -> 57  numbers(0-9)
			0       \0(null charecter)

		substring() method :

	String substring = string.substring(int,int);
 	

		19NF1A0401
		
		Year of Joining : 2019
		COllge code: NF1A 
		Branch : EE
		roll no : 01

		String comaprision:
			
			1) using equals() method
			2) usingn compareTo() method
			3) using  is equals to (==) operator			

			Using equals() method:

			using compareTo() method:
			

		int z = s1.compareTo(s2);
		
		if z== 0, then string are equal
		if(z>0), then s1 is greater than s2
		if(z<0), s1 is less thann s2

		String Concatenation  process:
 
 		concat()
		+ symbol

		s1 ="java"
		s2 = " program"
		s1.concat(s2)
		
		
		Wap to find sum of digits in a given string
		ex:
			ip: programming123
			o/p: 6

		Wap to read student branch and roll no:
		
		1)  read stubranch
			-> branch must be in CSE or ECE or EEE or MECH or CIVIL, e			else invalid branch
		2) if branch verified : thean read rollno
			-> length of roll no must be10
			->verify branch code with entered branch

		3) if rollno is validated, then read 6 sub marks and perform grade
               question (student will be pass if he scored minimum 40 marks in each
             sub)   
		
		wap to convert alphabet in the given number with number based on       keypad mobile.
   
      2 -> A,B,C
	3-> D,EF
  	4-> G,H,I
      5 -> J,K,L
     6  -> M,N,O
     7-> P,Q,R,S
     8 ->T, U V
     9->W, X, Y, Z
      
    IP: 
         3c5-567-xk9
op:
      325-567-959

		
		StringBuffer class:
			
		public java.lang.StringBuffer();
			
		syntax:
			StringBuffer sb = new StringBuffer();
		
		16  ->(16+16 +2)=34 =>(34+34+2) = 70

		

		public java.lang.StringBuffer(int);
		Syntax: 
		StringBuffer sb = new StringBuffer(6);
		
		
		
		public java.lang.StringBuffer(java.lang.String);
			
		Syntax: 
			StringBuffer sb = new StringBuffer("java");
		

		public java.lang.StringBuffer(java.lang.CharSequence);
		
		StringBuffer sb1 = new StringBuffer("Java");
		StringBuffer sb2 =  new StringBuffer(sb1);
		
		synchronized

		
	StringBuilder : 
		
	public java.lang.StringBuilder()
	public java.lang.StringBuilder(int )
	public java.lang.StringBuilder(java.lang.String)
	public java.lang.StringBuilder(java.lang.CharSequence)
		
						

		1) java.lang.String:	
		-> generates Immutable objects
		->Secured & Thread Safe
		
        2) java.lang.StringBuffer
        -> Generates mutable objects
       -> Synchronized class
	-> Secured and Thread - Safe Class
		
	3) java.lang.StringBuilder
	-> Generated Mutable objects
	->Non Synchronized class
	-> not secured & not thread safe
		
	StringTokenizer class

		1)hasMoreTokens()
			
			public boolean hasMoreTokens();	

		2)nextToken()
			
		public java.lang.String nextToken();


		3)countTokens()
			
			public int countToken();

		Syntax of StringTokenizer:
		
	StringTokenizer ob = new StringTokenizer(java.lang.String,"delimeter");
			

		






	
	
	StringJoiner class :
		
	-> public java.util.StringJoiner setEmptyValue(java.lang.CharSequence);
	->public lava.lang.String toString();
	->public java.util.StringJoiner add(java.lang.CharSequence);
      -> publi c java.util.StringJoiner merge(java.util.StringJoiner);
	-> public int length();
		
Wrapper classes
	int     Integer
	float  Float
	char  Charecter
	double Double
	byte     Byte
   	short   Short
	long  Long
	boolean	Boolean		

       Integer ob1 = new Integer("12");
	
     Boxing Process: 

     it is performed by using Constructors.

the following is the list of constructor fromWrapperClasses

  Byte (byte)
Byte(String)
 Byte         byte, String
Short          short,String
Interger      int, String
Long          long,String
Float         float,double,String
 Double    double,String
Charecter  char
Boolean    boolean,String

UNBOXING:

		public byte byteValue();
		public short shortValue();
		public long longValue();
		public int intValue();
		public float floatValue()
		public double doubleValue();
		public char charValue()
		public boolean booleanValue();

		AutoBoxingProcess:
		

		


	JCF(Java collection Framework) , Hibernate with JPA(JAVA PERSISTANCE APPLICATION PROGRAMMING INTERFACE) 
AND spring works are with objects, 

Acess Modiiers in JAVA:
	
	-> aCCESS MODIFIERS are used to spcify the visibilty of progrmming components within the project

	the following are some importance acces modifiers from java:
		
	1.public
           : public proramming progrmming components are accessed within the project folder.
	
   2.private :
		private programming component are accessed within class.
  3.protected :
  		protected programming components are access with in the package
		Note:
		->  in inheritance proess, the programming components of parent class are available to child class decalred outside the package.

 4. default :
	default programming components are access only inside the package
  
	-> THE PROGRAMMING COMPONENTS IN CLASS WHICH are declared without any any access modifier then it is considered as default

	-> to specify default  there no keyword in classes.




RelationShip b/w Classes:
 
	References:
   	Interitance:
  		"extends" 
		
		Syntac:
		
   class A
	{
		//ParentClas Body
  	}

 	class B extends A
	{
		//ChildClass Body	
	}
 
	B ob = new B():
		
	
	Case 1: NonStatic member from the parent class/Superclass
	case 2: Static members from the parentclass/superclass
	case 3: Constructors of parentclass/Superclass
		

		public





	->Same Method signature:
		-> same return type
		->same method name
		-> same para _ list
		-> same para_type

		
		1) non static  method over riding
					-> 		
		2)Static method overriding
		constructor overriding

		
		'this'

	-> Interface
		
	Str of abstract method:
		
	return_type method_name(para_list);

	Concrete Method:
	
	return_type method_name(para_list)
	{
		//body of method.
	}


	1.we use interface keyword to declare interfaces.
	
	syntax:

	interface  interface_name
	{
		//interface body
	}

	2. Access Modifier: -> public 
		
	'implements' 


		Syntax:
		
		class Iclass implements Interface_name
		{
			//Iclass body
		}
			
		1)Static concrete methods(Java -8)
		2)default concrete methos(Java - 8)
		3)private concrete methods((Java -9)

		1)Static concrete methods(Java -8) :


		multiple interhitance using Interfaces:
	
		
	public interface java.lang.Runnable
	{	
		public abstract void run()
	}



	OuterClass_name.Inner_Class ob_name = new	OuterClass_name.Inner_Class();

		Subclass1.subclass2 ob2 = new Subclass1.Subclass2();

class files generation in innerclass

	Outerclass_name.Innerclass_name object_name =
		 Outerclass_objectname.new Innerclass();

	Subclass1 ob = new Subclass();
	Subclass1.Subclass2 ob 2= ob.new Subclass2();  

	Subclass1.class
	Subclass1$Subclass2.class
	DemoMain.class

	
	CClass ob = (CClass) new PClass();

	java.lang.ClassCastException.

	Ex: Cloning process
		De- Serilization process

	Anonymous Inner Classes

	class Pclass
{
	//class body
}


	Pclass ob = new Pclass()
	{
	// Cclass body
	};

	Lambda Expression - Java 8 feature

      SyNtax: 
		
	(para_list) ->
	{

	}



	data_type arrayname[] = new data_type[size];

	class_name arrayname[] = new class_name[size];

		for( data_type  var : container_name)
		{
				////loop body
		}

	length() - 
	length

	define Spliterator<T>  sp = Arrays.spliterator();


		Collection<E>
		spliterator() 
		
	Syntax:
	method signature
		public default void forEachReamining
						(java.util.function.Consumer< ? super T>);
	
	Consumer<T>


Syntax:  
		Object a[]  = new Object[size];

	datatype arrayname[][] = new datatype[rsize][csize];
	classname arrayname[][]  = new classname[rsize][csize];

		jagged array?
		
	Collection<E>
	
	T - Type
	E - Element
	K- key
	V - value
	
	Synatx :   
		
	<T> return_type method_name (T)
		{
				//method body
		}

	Syntax :
		
	class Class_name<T>
	{
		//classmembers
	}

		1) HashSet<E>
					
		2)LinkedHashSet<E>
					
		3)TreeSet<E>

	
		1)ArrayList<E>

			Syntax : ArrayList<E> object = new ArrayList<E>();

			
		2)LinkedList<E>
			LinkedList<E> object = new LinkedList<E>();

			
		
		3)Vector<E>

		Vector<E> object = new Vector<E>();
			
		public synchronized int capacity();
`
		10->20->40->80-> 160
		public synchronized int size();
		
		public synchonized E firstElement();
	public synchonized E lastElement();
public synchonized E setElement(E,int);

	Sytax:
		Stack<E> st = new Stack<E> ();

	public E push(E); // insert elements
	public synchronized E pop(); //remove the last input element
	
	public synchronized E peek();// to view last input element

	public boolean empty() // to chech is stact empty or not
	public synchronized int search(); // to search an element an return index position
		
		







